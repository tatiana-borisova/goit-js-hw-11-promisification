{"version":3,"sources":["index.js"],"names":["delay1","ms","Promise","resolve","setTimeout","logger1","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","logger2","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","delay","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAIA,MAAMA,EAASC,GACN,IAAIC,QAAQC,IACjBC,WAAW,KACTD,EAAQF,IACPA,KAIDI,EAAUC,GAAQC,QAAQC,sBAAsBF,OAGtDN,EAAO,KAAMS,KAAKJ,GAClBL,EAAO,KAAMS,KAAKJ,GAClBL,EAAO,MAAMS,KAAKJ,GAMlB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,IAC1Bb,QAAQC,QACbW,EAASE,IAAIC,GAASA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,IAIjFC,EAAUC,GAAgBZ,QAAQa,MAAMD,GAE9CN,EAAgBH,EAAO,SAASD,KAAKS,GACrCL,EAAgBH,EAAO,OAAOD,KAAKS,GAMnC,MAAMG,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,GACf,IAAI1B,QAAQ,CAACC,EAAS0B,KACrBC,MAAAA,EAAQT,EAA0B,IAAK,KAC7CjB,WAAW,KACUoB,KAAKE,SAAW,GAGjCvB,EAAQ,CAAE4B,GAAIH,EAAYG,GAAIzB,KAAMwB,IAEpCD,EAAOD,EAAYG,KAEpBD,KAIDE,EAAa,EAAGD,GAAAA,EAAIzB,KAAAA,MACxBC,QAAQC,mBAAmBuB,kBAAmBzB,QAG1C2B,EAAWF,IACfxB,QAAQ2B,qCAAqCH,+BAG/CJ,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAAO1B,KAAKuB,GAAYI,MAAMH,GAChEN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAAO1B,KAAKuB,GAAYI,MAAMH,GAChEN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,KAAM1B,KAAKuB,GAAYI,MAAMH,GAC/DN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAAO1B,KAAKuB,GAAYI,MAAMH","file":"src.5f2975a1.js","sourceRoot":"../src","sourcesContent":["// Задание 1\n// Напиши функцию delay1(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд.\n// Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\n\nconst delay1 = ms => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nconst logger1 = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay1(2000).then(logger1); // Resolved after 2000ms\ndelay1(1000).then(logger1); // Resolved after 1000ms\ndelay1(1500).then(logger1); // Resolved after 1500ms\n\n// Задание 2\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback,\n// а принимала всего два параметра allUsers и userName и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return Promise.resolve(\n    allUsers.map(user => (user.name === userName ? { ...user, active: !user.active } : user)),\n  );\n};\n\nconst logger2 = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger2);\ntoggleUserState(users, 'Lux').then(logger2);\n\n// Задание 3\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError,\n// а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay });\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"]}